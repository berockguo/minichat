/* logic_tool_impl.cpp

 Generated by phxrpc_pb2tool from logic.proto

*/

#include "logic_tool_impl.h"
#include "logic_client.h"

#include "phxrpc/file.h"

#include <random>     // random_device, uniform_int_distribution
#include <sstream>

using namespace phxrpc;

LogicToolImpl:: LogicToolImpl()
{
}

LogicToolImpl:: ~LogicToolImpl()
{
}

int LogicToolImpl :: PHXEcho( phxrpc::OptMap & opt_map )
{
    google::protobuf::StringValue req;
    google::protobuf::StringValue resp;

    if( NULL == opt_map.Get( 's' ) ) return -1;

    req.set_value( opt_map.Get( 's' ) );

    LogicClient client;
    int ret = client.PHXEcho( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int LogicToolImpl :: Auth( phxrpc::OptMap & opt_map )
{
    logic::MiniRequest req;
    logic::MiniResponse resp;

    //TODO: fill req from opt_map


    LogicClient client;
    int ret = client.Auth( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int LogicToolImpl :: Sync( phxrpc::OptMap & opt_map )
{
    logic::MiniRequest req;
    logic::MiniResponse resp;

    //TODO: fill req from opt_map


    LogicClient client;
    int ret = client.Sync( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int LogicToolImpl :: SendMsg( phxrpc::OptMap & opt_map )
{
    logic::MiniRequest req;
    logic::MiniResponse resp;

    // fill req from opt_map

    if( NULL == opt_map.Get( 's' ) || NULL == opt_map.Get( 't' )
            || NULL == opt_map.Get( 'm' ) ) {
        return -1;
    }

    logic::SendMsgRequest req_obj;
    {
        logic::MsgRequest * msg = req_obj.add_msg();
        req.mutable_head()->set_username( opt_map.Get( 's' ) );
        msg->set_to( opt_map.Get( 't' ) );
        msg->set_content( opt_map.Get( 'm' ) );

        std::random_device rd;
        std::stringstream fmt;
        fmt << rd() << rd();
        msg->set_uuid( fmt.str() );
    }

    req_obj.SerializeToString( req.mutable_req_buff() );

    LogicClient client;
    int ret = client.SendMsg( req, &resp );

    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    if( 0 == ret && 0 == resp.ret() ) {
        logic::SendMsgResponse resp_obj;
        resp_obj.ParseFromString( resp.resp_buff() );

        printf( "result: {\n%s\n}\n", resp_obj.DebugString().c_str() );
    }

    return ret;
}

