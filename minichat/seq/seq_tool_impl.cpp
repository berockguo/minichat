/* seq_tool_impl.cpp

 Generated by phxrpc_pb2tool from seq.proto

*/

#include "seq_tool_impl.h"
#include "seq_client.h"

#include "phxrpc/file.h"

using namespace phxrpc;

SeqToolImpl:: SeqToolImpl()
{
}

SeqToolImpl:: ~SeqToolImpl()
{
}

int SeqToolImpl :: PHXEcho( phxrpc::OptMap & opt_map )
{
    google::protobuf::StringValue req;
    google::protobuf::StringValue resp;

    if( NULL == opt_map.Get( 's' ) ) return -1;

    req.set_value( opt_map.Get( 's' ) );

    SeqClient client;
    int ret = client.PHXEcho( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int SeqToolImpl :: Alloc( phxrpc::OptMap & opt_map )
{
    seq::AllocReq req;
    google::protobuf::UInt32Value resp;

    // fill req from opt_map
    if( NULL == opt_map.Get( 'u' ) || NULL == opt_map.Get( 't' ) ) return -1;

    req.set_username( opt_map.Get( 'u' ) );
    req.set_type( atoi( opt_map.Get( 't' ) ) );

    SeqClient client;
    int ret = client.Alloc( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

int SeqToolImpl :: Get( phxrpc::OptMap & opt_map )
{
    google::protobuf::StringValue req;
    seq::SyncKey resp;

    // fill req from opt_map
    if( NULL == opt_map.Get( 'u' ) ) return -1;

    req.set_value( opt_map.Get( 'u' ) );

    SeqClient client;
    int ret = client.Get( req, &resp );
    printf( "%s return %d\n", __func__, ret );
    printf( "resp: {\n%s}\n", resp.DebugString().c_str() );

    return ret;
}

